services:
  users_db:
    image: postgres:15
    container_name: easylink_users_db
    environment:
      POSTGRES_USER: ${USERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USERS_POSTGRES_DB}
    ports:
      - "${USERS_POSTGRES_PORT}:5432"
    volumes:
      - users_db_data:/var/lib/postgresql/data
    networks:
      - easylink_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USERS_POSTGRES_USER} -d ${USERS_POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  users_service:
    build: ./users-service
    container_name: easylink_users_service
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: ${USERS_DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      users_db:
        condition: service_healthy
    networks:
      - easylink_network
    restart: unless-stopped

  url_db:
    image: postgres:15
    container_name: easylink_url_db
    environment:
      POSTGRES_USER: ${URL_POSTGRES_USER}
      POSTGRES_PASSWORD: ${URL_POSTGRES_PASSWORD}
      POSTGRES_DB: ${URL_POSTGRES_DB}
    ports:
      - "${URL_POSTGRES_PORT}:5432"
    volumes:
      - url_db_data:/var/lib/postgresql/data
    networks:
      - easylink_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${URL_POSTGRES_USER} -d ${URL_POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  url_service:
    build: ./url-service
    container_name: easylink_url_service
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: ${URL_DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      USERS_SERVICE_URL: ${USERS_SERVICE_URL}
      ANALYTICS_SERVICE_URL: ${ANALYTICS_SERVICE_URL}
    depends_on:
      url_db:
        condition: service_healthy
      users_service:
        condition: service_started
    networks:
      - easylink_network
    restart: unless-stopped

  url_cleanup:
    build: ./url-service
    container_name: easylink_url_cleanup
    command: python cleanup_scheduler.py
    environment:
      URL_SERVICE_URL: ${URL_SERVICE_URL}
      ADMIN_TOKEN: ${ADMIN_TOKEN}
    depends_on:
      url_service:
        condition: service_started
    networks:
      - easylink_network
    restart: unless-stopped

  analytics_db:
    image: postgres:15
    container_name: easylink_analytics_db
    environment:
      POSTGRES_USER: ${ANALYTICS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ANALYTICS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ANALYTICS_POSTGRES_DB}
    ports:
      - "${ANALYTICS_POSTGRES_PORT}:5432"
    volumes:
      - analytics_db_data:/var/lib/postgresql/data
    networks:
      - easylink_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ANALYTICS_POSTGRES_USER} -d ${ANALYTICS_POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  analytics_service:
    build: ./analytics-service
    container_name: easylink_analytics_service
    ports:
      - "8003:8003"
    environment:
      DATABASE_URL: ${ANALYTICS_DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      USERS_SERVICE_URL: ${USERS_SERVICE_URL}
      URL_SERVICE_URL: ${URL_SERVICE_URL}
      ADMIN_TOKEN: ${ADMIN_TOKEN}
    depends_on:
      analytics_db:
        condition: service_healthy
      users_service:
        condition: service_started
      url_service:
        condition: service_started
    networks:
      - easylink_network
    restart: unless-stopped

volumes:
  users_db_data:
  url_db_data:
  analytics_db_data:

networks:
  easylink_network:
    driver: bridge
